// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package queries

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.allTasksStmt, err = db.PrepareContext(ctx, allTasks); err != nil {
		return nil, fmt.Errorf("error preparing query AllTasks: %w", err)
	}
	if q.allTasksByUserStmt, err = db.PrepareContext(ctx, allTasksByUser); err != nil {
		return nil, fmt.Errorf("error preparing query AllTasksByUser: %w", err)
	}
	if q.countTasksByUserStmt, err = db.PrepareContext(ctx, countTasksByUser); err != nil {
		return nil, fmt.Errorf("error preparing query CountTasksByUser: %w", err)
	}
	if q.deleteUserStmt, err = db.PrepareContext(ctx, deleteUser); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteUser: %w", err)
	}
	if q.findTaskByIDStmt, err = db.PrepareContext(ctx, findTaskByID); err != nil {
		return nil, fmt.Errorf("error preparing query FindTaskByID: %w", err)
	}
	if q.findTasksByUserIDStmt, err = db.PrepareContext(ctx, findTasksByUserID); err != nil {
		return nil, fmt.Errorf("error preparing query FindTasksByUserID: %w", err)
	}
	if q.storeTaskStmt, err = db.PrepareContext(ctx, storeTask); err != nil {
		return nil, fmt.Errorf("error preparing query StoreTask: %w", err)
	}
	if q.storeUserStmt, err = db.PrepareContext(ctx, storeUser); err != nil {
		return nil, fmt.Errorf("error preparing query StoreUser: %w", err)
	}
	if q.updateTaskStmt, err = db.PrepareContext(ctx, updateTask); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateTask: %w", err)
	}
	if q.userByEmailStmt, err = db.PrepareContext(ctx, userByEmail); err != nil {
		return nil, fmt.Errorf("error preparing query UserByEmail: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.allTasksStmt != nil {
		if cerr := q.allTasksStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing allTasksStmt: %w", cerr)
		}
	}
	if q.allTasksByUserStmt != nil {
		if cerr := q.allTasksByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing allTasksByUserStmt: %w", cerr)
		}
	}
	if q.countTasksByUserStmt != nil {
		if cerr := q.countTasksByUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing countTasksByUserStmt: %w", cerr)
		}
	}
	if q.deleteUserStmt != nil {
		if cerr := q.deleteUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteUserStmt: %w", cerr)
		}
	}
	if q.findTaskByIDStmt != nil {
		if cerr := q.findTaskByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTaskByIDStmt: %w", cerr)
		}
	}
	if q.findTasksByUserIDStmt != nil {
		if cerr := q.findTasksByUserIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing findTasksByUserIDStmt: %w", cerr)
		}
	}
	if q.storeTaskStmt != nil {
		if cerr := q.storeTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeTaskStmt: %w", cerr)
		}
	}
	if q.storeUserStmt != nil {
		if cerr := q.storeUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing storeUserStmt: %w", cerr)
		}
	}
	if q.updateTaskStmt != nil {
		if cerr := q.updateTaskStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateTaskStmt: %w", cerr)
		}
	}
	if q.userByEmailStmt != nil {
		if cerr := q.userByEmailStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing userByEmailStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                    DBTX
	tx                    *sql.Tx
	allTasksStmt          *sql.Stmt
	allTasksByUserStmt    *sql.Stmt
	countTasksByUserStmt  *sql.Stmt
	deleteUserStmt        *sql.Stmt
	findTaskByIDStmt      *sql.Stmt
	findTasksByUserIDStmt *sql.Stmt
	storeTaskStmt         *sql.Stmt
	storeUserStmt         *sql.Stmt
	updateTaskStmt        *sql.Stmt
	userByEmailStmt       *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                    tx,
		tx:                    tx,
		allTasksStmt:          q.allTasksStmt,
		allTasksByUserStmt:    q.allTasksByUserStmt,
		countTasksByUserStmt:  q.countTasksByUserStmt,
		deleteUserStmt:        q.deleteUserStmt,
		findTaskByIDStmt:      q.findTaskByIDStmt,
		findTasksByUserIDStmt: q.findTasksByUserIDStmt,
		storeTaskStmt:         q.storeTaskStmt,
		storeUserStmt:         q.storeUserStmt,
		updateTaskStmt:        q.updateTaskStmt,
		userByEmailStmt:       q.userByEmailStmt,
	}
}
