// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user.sql

package queries

import (
	"context"
	"database/sql"
)

const deleteUser = `-- name: DeleteUser :execresult
UPDATE users SET deleted_at = NOW() WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) (sql.Result, error) {
	return q.exec(ctx, q.deleteUserStmt, deleteUser, id)
}

const storeUser = `-- name: StoreUser :execresult
INSERT INTO users (first_name, email, password, role_id) VALUES (?, ?, ?, ?)
`

type StoreUserParams struct {
	FirstName string         `json:"first_name"`
	Email     sql.NullString `json:"email"`
	Password  string         `json:"password"`
	RoleID    int32          `json:"role_id"`
}

func (q *Queries) StoreUser(ctx context.Context, arg StoreUserParams) (sql.Result, error) {
	return q.exec(ctx, q.storeUserStmt, storeUser,
		arg.FirstName,
		arg.Email,
		arg.Password,
		arg.RoleID,
	)
}

const userByEmail = `-- name: UserByEmail :one
SELECT id, first_name, email, password, role_id, deleted_at FROM users WHERE email = ?
`

func (q *Queries) UserByEmail(ctx context.Context, email sql.NullString) (User, error) {
	row := q.queryRow(ctx, q.userByEmailStmt, userByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FirstName,
		&i.Email,
		&i.Password,
		&i.RoleID,
		&i.DeletedAt,
	)
	return i, err
}
